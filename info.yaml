--- 
# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID
  source_files:        # If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. Source files must be in ./src
    - toplevel/logisimTopLevelShell.v
    - circuit/*.v
    - gates/*.v
    - memory/*.v
    - plexers/*.v
  top_module:  "tholin_avalonsemi_5401"      # put the name of your top module here, make it unique by prepending your github username

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it.
#
# Here is an example: https://github.com/mattvenn/tinytapeout_m_segments/blob/main/info.yaml
#
# This info will be automatically collected and used to make a datasheet for the chip.
documentation: 
  author:       "Tholin"      # Your name
  title:        "Avalon Semiconductors '5401' 4-bit Microprocessor"      # Project title
  description:  "4-bit CPU capable of addressing 4096 bytes program memory and 254 words data memory, with 6 words of on-chip RAM. Hopefully capable of more complex computation than previous CPU submissions."      # Short description of what your project does
  how_it_works: "The chip contains a 4-bit ALU, a 4-bit Accumulator, 8-bit Memory Address Register and 12-bit ˝Destination Register˝, which is used to buffer branch target addresses. It also has two general-purpose input ports. The instruction set consists of 16 instructions, containing arihmatic, logical, load/store, branch and conditional branch instruction. See the full documentation for a complete architectural description."      # Longer description of how the project works
  how_to_test:  "It is possibly to test the CPU by hard-wiring a LML instruction. Start the clock and set the following on the DIP switches: 01001100. This will reset the CPU and set up the LML instruction. After releasing reset, the following bit sequence should loop on the outputs: 00000011 - xxxx1000 (’x’ means don’t care)."      # Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  external_hw:  "At the very minimum a program memory, and the required glue logic. See ˝Example system diagram˝ in the full documentation."      # Describe any external hardware needed
  language:     "verilog" # other examples include Verilog, Amaranth, VHDL, etc
  doc_link:     "https://github.com/89Mods/tt2-AvalonSemi-5401/blob/main/README.md"      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     6000       # Clock frequency in Hz (if required)
  picture:      "assets/block_diag.png"      # relative path to a picture in your repository
  inputs:               # a description of what the inputs do
    - CLK
    - RST
    - D0
    - D1
    - D2
    - D3
    - EF0
    - EF1
  outputs:
    - D0_RR0         # a description of what the outputs do
    - D1_RR1
    - D2_RR2
    - D3_RR3
    - D4_MAR
    - D5_WRITE
    - D6_JMP
    - D7_I

